apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'

android {

    buildToolsVersion = rootProject.ext.buildToolsVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kapt {
        generateStubs = true
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.serialization.UnstableDefault"
        ]
    }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation "org.robolectric:robolectric:$rootProject.roboelectric"

    // Jetbrains Kotlin Dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    /*implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_version"*/
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"

}

configurations.all {
    resolutionStrategy{
        cacheChangingModulesFor 0, 'seconds'
    }
}